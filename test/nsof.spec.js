/*jshint expr: true*/

var path = require( 'path' );
var newtonSync = require( path.resolve( path.join( __dirname, '..' ) ) );
var NsOF = newtonSync.NsOF;
var EventCommand = newtonSync.EventCommand;
var expect = require( 'chai' ).expect;
var net = require('net');

var _ = require('lodash');

describe('NSOF', function( done ) {
    var client = null;

    it('should generate a number', function (){
      NsOFimmediate = new Buffer('020004','hex');
      expect(NsOF.fromValue(1).equals(NsOFimmediate)).to.be.true;
    });
    
    it('should generate a number greater than 255', function (){
      NsOFimmediate = new Buffer('0200FF00003CCC','hex');
      expect(NsOF.fromValue(3891).equals(NsOFimmediate)).to.be.true;
    });
    
    it('should generate a string', function (){
      NsOfString = new Buffer([0x02,0x08,0x1A,0x00,0x57,0x00,0x61,0x00,0x6C,0x00,0x74,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x53,0x00,0x6D,0x00,0x69,0x00,0x74,0x00,0x68,0x00,0x00]);
      expect(NsOF.fromValue("Walter Smith").equals(NsOfString)).to.be.true;
    });
    
    it('should generate an array', function (){
      NsOfArray = new Buffer([0x02,0x05,0x02,0x08,0x08,0x00,0x66,0x00,0x6f,0x00,0x6f,0x00,0x00,0x08,0x08,0x00,0x62,0x00,0x61,0x00,0x72,0x00,0x00]);
      expect(NsOF.fromValue(['foo','bar']).equals(NsOfArray)).to.be.true;
    });

    it('should generate an frame object', function (){
      NsOfObject = new Buffer([0x02,0x06,0x02,0x07,0x04,0x6E,0x61,0x6D,0x65,0x07,0x04,0x63,0x61,0x74,0x73,0x08,0x1A,0x00,0x57,0x00,0x61,0x00,0x6C,0x00,0x74,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x53,0x00,0x6D,0x00,0x69,0x00,0x74,0x00,0x68,0x00,0x00,0x00,0x08]); 
      expect(NsOF.fromValue({name: "Walter Smith", cats: 2}).equals(NsOfObject)).to.be.true;
    });
    
    it('should generate a complex frame object', function (){
      testBuff = new Buffer([0x6e, 0x65, 0x77, 0x74 , 0x64 , 0x6f , 0x63 , 0x6b , 0x64 , 0x69 , 0x6e , 0x66 , 0x00 , 0x00 , 0x00 , 0x66 , 0x00 , 0x00 , 0x00 , 0x0a , 0x00 , 0x00 , 0x00 , 0x00 , 0x55 , 0x86 , 0x75 , 0x0a , 0x6e , 0x6e , 0x0f , 0x63 , 0x00 , 0x00 , 0x00 , 0x01 , 0x00 , 0x00 , 0x00 , 0x01 , 0x02 , 0x05 , 0x01 , 0x06 , 0x04 , 0x07 , 0x04 , 0x6e , 0x61 , 0x6d , 0x65 , 0x07 , 0x02 , 0x69 , 0x64 , 0x07 , 0x07 , 0x76 , 0x65 , 0x72 , 0x73 , 0x69 , 0x6f , 0x6e , 0x07 , 0x08 , 0x64 , 0x6f , 0x65 , 0x73 , 0x41 , 0x75 , 0x74 , 0x6f , 0x08 , 0x24 , 0x00 , 0x4e , 0x00 , 0x65 , 0x00 , 0x77 , 0x00 , 0x74 , 0x00 , 0x6f , 0x00 , 0x6e , 0x00 , 0x20 , 0x00 , 0x43 , 0x00 , 0x6f , 0x00 , 0x6e , 0x00 , 0x6e , 0x00 , 0x65 , 0x00 , 0x63 , 0x00 , 0x74 , 0x00 , 0x69 , 0x00 , 0x6f , 0x00 , 0x6e , 0x00 , 0x00 , 0x00 , 0x08 , 0x00 , 0x04 , 0x00 , 0x1a , 0x00 , 0x00]);
      opts = {
        protocolVersion: 10,
        desktopType: 0,
        encryptedKey1: 1434875146,
        encryptedKey2: 1852706659,
        sessionType: 1,
        allowSelectiveSync: 1,
        desktopApps: [{name: "Newton Connection", id: 2, version: 1, doesAuto: true}]
      };

      testCommand = EventCommand.parse('kDDesktopInfo',opts);
      commBuff = testCommand.toBinary();
/*      for (var i = 0; i < testBuff.length ; i++) {
        if(commBuff[i] !== null && commBuff[i] !== undefined)
          myVal = commBuff[i].toString(16);
        else
          myVal = null;
        theirVal = testBuff[i].toString(16);
        if (myVal != theirVal)
          console.log(myVal + "("+String.fromCharCode(commBuff[i])+") -> " + theirVal + "("+String.fromCharCode(testBuff[i])+") <-----");
        else
          console.log(myVal + "("+String.fromCharCode(commBuff[i])+") -> " + theirVal + "("+String.fromCharCode(testBuff[i])+") ");
      }
*/
      expect(commBuff.equals(testBuff)).to.be.true;
    });
});
